"use strict";const css=`\n@keyframes nodeInserted {\n        from { opacity: 0.99; }\n        to { opacity: 1; }\n    }\n    svg[data-src] {\n        animation-duration: 0.001s;\n        animation-name: nodeInserted;\n    }\n`;const head=document.head||document.getElementsByTagName("head")[0],style=document.createElement("style");head.appendChild(style);style.appendChild(document.createTextNode(css));const isCacheAvailable=e=>{try{const t=JSON.parse(localStorage.getItem(`loader_${e}`)||"{}");if(!t.expiry){return}if(Date.now()<t.expiry){return t.data}else{localStorage.removeItem(`loader_${e}`);return}}catch(e){return}};const setCache=(e,t,n)=>{const a=parseInt(n,10);localStorage.setItem(`loader_${e}`,JSON.stringify({data:t,expiry:Date.now()+Number.isNaN(a)?60*60*1e3*24:a}))};const renderBody=(e,t)=>{const n=new DOMParser;const a=n.parseFromString(t,"text/html");const r=a.querySelector("svg");for(let t=0;t<r.attributes.length;t++){const{name:n,value:a}=r.attributes[t];if(!e.getAttribute(n)){e.setAttribute(n,a)}}e.innerHTML=r.innerHTML};const renderIcon=e=>{const t=e.getAttribute("data-src");const n=e.getAttribute("data-cache");const a=isCacheAvailable(t);const r=n!=="disabled";if(r&&a){renderBody(e,a)}else{fetch(t).then((e=>e.text())).then((a=>{if(r){setCache(t,a,n)}renderBody(e,a)}))}};document.addEventListener("animationstart",(e=>{const t=e.target;const n=new MutationObserver((e=>{e.forEach((e=>{if(e.attributeName==="data-src"){renderIcon(t)}}))}));n.observe(t,{attributes:true});if(e.animationName==="nodeInserted"){renderIcon(t)}}),false);