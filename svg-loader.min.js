"use strict";const isCacheAvailable=e=>{try{const t=JSON.parse(localStorage.getItem(`loader_${e}`)||"{}");if(!t.expiry){return}if(Date.now()<t.expiry){return t.data}else{localStorage.removeItem(`loader_${e}`);return}}catch(e){return}};const setCache=(e,t,r)=>{const n=parseInt(r,10);try{localStorage.setItem(`loader_${e}`,JSON.stringify({data:t,expiry:Date.now()+(Number.isNaN(n)?60*60*1e3*24:n)}))}catch(e){return}};const renderBody=(e,t)=>{const r=new DOMParser;const n=r.parseFromString(t,"application/xml");const s=n.querySelector("svg");for(let t=0;t<s.attributes.length;t++){const{name:r,value:n}=s.attributes[t];if(!e.getAttribute(r)){e.setAttribute(r,n)}}e.setAttribute("data-rendered",true);e.innerHTML=s.innerHTML};const requestsInProgress={};const memoryCache={};const renderIcon=e=>{const t=e.getAttribute("data-src");const r=e.getAttribute("data-cache");const n=isCacheAvailable(t);const s=r!=="disabled";if(memoryCache[t]||s&&n){const r=memoryCache[t]||n;renderBody(e,r)}else{if(requestsInProgress[t]){setTimeout((()=>renderIcon(e)),20);return}requestsInProgress[t]=true;fetch(t).then((e=>e.text())).then((n=>{if(s){setCache(t,n,r)}memoryCache[t]=n;renderBody(e,n)})).finally((()=>{delete requestsInProgress[t]}))}};const intObserver=new IntersectionObserver((e=>{e.forEach((e=>{if(e.isIntersecting){renderIcon(e.target);intObserver.unobserve(e.target)}}))}),{rootMargin:"1200px"});function renderAllSVGs(){Array.from(document.querySelectorAll("svg[data-src]:not([data-rendered])")).forEach((e=>{if(e.getAttribute("data-loading")==="lazy"){intObserver.observe(e)}else{renderIcon(e)}}))}let observerAdded=false;const addObservers=()=>{if(observerAdded){return}observerAdded=true;const e=new MutationObserver((e=>{const t=e.some((e=>Array.from(e.addedNodes).some((e=>e.nodeType===Node.ELEMENT_NODE&&e.getAttribute("data-src")&&!e.getAttribute("data-rendered")))));if(t){renderAllSVGs()}e.forEach((e=>{if(e.type==="attributes"){renderIcon(e.target)}}))}));e.observe(document.documentElement,{attributeFilter:["data-src"],attributes:true,childList:true,subtree:true})};const intervalCheck=setInterval((()=>{renderAllSVGs()}),100);window.addEventListener("DOMContentLoaded",(()=>{renderAllSVGs();clearInterval(intervalCheck)}));addObservers();