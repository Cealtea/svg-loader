(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class Store {
    constructor(dbName = 'keyval-store', storeName = 'keyval') {
        this.storeName = storeName;
        this._dbp = new Promise((resolve, reject) => {
            const openreq = indexedDB.open(dbName, 1);
            openreq.onerror = () => reject(openreq.error);
            openreq.onsuccess = () => resolve(openreq.result);
            // First time setup: create an empty object store
            openreq.onupgradeneeded = () => {
                openreq.result.createObjectStore(storeName);
            };
        });
    }
    _withIDBStore(type, callback) {
        return this._dbp.then(db => new Promise((resolve, reject) => {
            const transaction = db.transaction(this.storeName, type);
            transaction.oncomplete = () => resolve();
            transaction.onabort = transaction.onerror = () => reject(transaction.error);
            callback(transaction.objectStore(this.storeName));
        }));
    }
}
let store;
function getDefaultStore() {
    if (!store)
        store = new Store();
    return store;
}
function get(key, store = getDefaultStore()) {
    let req;
    return store._withIDBStore('readonly', store => {
        req = store.get(key);
    }).then(() => req.result);
}
function set(key, value, store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.put(value, key);
    });
}
function del(key, store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.delete(key);
    });
}
function clear(store = getDefaultStore()) {
    return store._withIDBStore('readwrite', store => {
        store.clear();
    });
}
function keys(store = getDefaultStore()) {
    const keys = [];
    return store._withIDBStore('readonly', store => {
        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.
        // And openKeyCursor isn't supported by Safari.
        (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {
            if (!this.result)
                return;
            keys.push(this.result.key);
            this.result.continue();
        };
    }).then(() => keys);
}

exports.Store = Store;
exports.get = get;
exports.set = set;
exports.del = del;
exports.clear = clear;
exports.keys = keys;

},{}],2:[function(require,module,exports){
"use strict"

const { get, set, del } = require('idb-keyval');

const isCacheAvailable = async (url) => {
    try {
        let item = await get(`loader_${url}`)

        if (!item) {
            return;
        }

        item = JSON.parse(item)

        if (Date.now() < item.expiry) {
            return item.data
        } else {
            del(`loader_${url}`)
            return;
        }
    } catch (e) {
        return;
    }
}

const setCache = (url, data, cacheOpt) => {
    const cacheExp = parseInt(cacheOpt, 10)
    
    try {
        set(`loader_${url}`, JSON.stringify({
            data,
            expiry: Date.now() + (Number.isNaN(cacheExp) ? 60 * 60 * 1000 * 24 : cacheExp)
        }))
    } catch (e) {
        return;
    }
    
}

const renderBody = (elem, body) => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(body, "application/xml")
    const fragment = doc.querySelector("svg")

    for (let i = 0; i < fragment.attributes.length; i++) {
        const {
            name,
            value
        } = fragment.attributes[i]

        // Don't override the attributes already defined
        if (!elem.getAttribute(name)) {
            elem.setAttribute(name, value)
        }
    }

    elem.setAttribute("data-rendered", true)
    elem.innerHTML = fragment.innerHTML
}

const requestsInProgress = {}
const memoryCache = {}

const renderIcon = async (elem) => {
    console.log("rendering", Date.now() -X)
    const src = elem.getAttribute("data-src")
    const cacheOpt = elem.getAttribute("data-cache")

    const lsCache = await isCacheAvailable(src)
    const isCachingEnabled = cacheOpt !== "disabled"

    // Memory cache optimizes same icon requested multiple
    // times on the page
    if (memoryCache[src] || (isCachingEnabled && lsCache)) {
        const cache = memoryCache[src] || lsCache

        renderBody(elem, cache)
    } else {
        // If the same icon is being requested to rendered
        // avoid firing multiple XHRs
        if (requestsInProgress[src]) {
            setTimeout(() => renderIcon(elem), 20)
            return;
        }

        requestsInProgress[src] = true

        fetch(src)
            .then((body) => body.text())
            .then((body) => {
                if (isCachingEnabled) {
                    setCache(src, body, cacheOpt)
                }

                memoryCache[src] = body

                renderBody(elem, body)
            })
            .finally(() => {
                delete requestsInProgress[src]
            })
    }
}

const intObserver = new IntersectionObserver(
    (entries) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                renderIcon(entry.target)
                
                // Unobserve as soon as soon the icon is rendered
                intObserver.unobserve(entry.target)
            }
        })
    }, {
        // Keep high root margin because intersection observer 
        // can be slow to react
        rootMargin: "1200px"
    }
);

const handled = []
function renderAllSVGs() {
    Array.from(document.querySelectorAll("svg[data-src]:not([data-rendered])"))
        .forEach((element) => {
            if (handled.indexOf(element) !== -1) {
                return;
            }

            handled.push(element)
            if (element.getAttribute("data-loading") === "lazy") {
                intObserver.observe(element)
            } else {
                renderIcon(element)
            }
        })
}

let observerAdded = false
const addObservers = () => {
    if (observerAdded) {
        return;
    }

    observerAdded = true
    const observer = new MutationObserver((mutationRecords) => {
        const shouldTriggerRender = mutationRecords.some(
            (record) => Array.from(record.addedNodes).some(
                (elem) => elem.nodeType === Node.ELEMENT_NODE
                    && elem.getAttribute("data-src")
                    && !elem.getAttribute("data-rendered")
            )
        )

        // If any node is added, render all new nodes
        if (shouldTriggerRender){
            renderAllSVGs();
        }

        // If data-src is changed, re-render
        mutationRecords.forEach((record) => {
            if (record.type === "attributes") {
                renderIcon(record.target)
            }
        })
    });
    
    observer.observe(
        document.documentElement,
        {
            attributeFilter: ["data-src"],
            attributes: true,
            childList: true,
            subtree: true
        }
    );    
}

// Start rendering SVGs as soon as possible
const intervalCheck = setInterval(() => {
    renderAllSVGs();
}, 100)


window.addEventListener("DOMContentLoaded", () => {
    clearInterval(intervalCheck)

    renderAllSVGs()
    addObservers()
})

},{"idb-keyval":1}]},{},[2]);
