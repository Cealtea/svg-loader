"use strict";const css=`\n@keyframes nodeInserted {\n        from { opacity: 0.99; }\n        to { opacity: 1; }\n    }\n    svg[data-src] {\n        animation-duration: 0.001s;\n        animation-name: nodeInserted;\n    }\n`;const head=document.head||document.getElementsByTagName("head")[0],style=document.createElement("style");head.appendChild(style);style.appendChild(document.createTextNode(css));const isCacheAvailable=e=>{try{const t=JSON.parse(localStorage.getItem(`loader_${e}`)||"{}");if(!t.expiry){return}if(Date.now()<t.expiry){return t.data}else{localStorage.removeItem(`loader_${e}`);return}}catch(e){return}};const setCache=(e,t,n)=>{const r=parseInt(n,10);localStorage.setItem(`loader_${e}`,JSON.stringify({data:t,expiry:Date.now()+(Number.isNaN(r)?60*60*1e3*24:r)}))};const renderBody=(e,t)=>{const n=new DOMParser;const r=n.parseFromString(t,"text/html");const s=r.querySelector("svg");for(let t=0;t<s.attributes.length;t++){const{name:n,value:r}=s.attributes[t];if(!e.getAttribute(n)){e.setAttribute(n,r)}}e.innerHTML=s.innerHTML};const requestsInProgress={};const memoryCache={};const renderIcon=e=>{const t=e.getAttribute("data-src");const n=e.getAttribute("data-cache");const r=isCacheAvailable(t);const s=n!=="disabled";if(memoryCache[t]||s&&r){const n=memoryCache[t]||r;renderBody(e,n)}else{if(requestsInProgress[t]){setTimeout((()=>renderIcon(e)),20);return}requestsInProgress[t]=true;fetch(t).then((e=>e.text())).then((r=>{if(s){setCache(t,r,n)}memoryCache[t]=r;renderBody(e,r)})).finally((()=>{delete requestsInProgress[t]}))}};document.addEventListener("animationstart",(e=>{const t=e.target;const n=new MutationObserver((e=>{e.forEach((e=>{if(e.attributeName==="data-src"){renderIcon(t)}}))}));n.observe(t,{attributes:true});if(e.animationName==="nodeInserted"){renderIcon(t)}}),false);